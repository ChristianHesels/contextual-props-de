# Word embeddings.
glove_300d {
  path = data/vectors_10w_300_umlaut.txt
  size = 300 
}

glove_300d_filtered {
  path = data/vectors_10w_300_umlaut.txt.filtered
  size = 300 
}
glove_300d_2w {
  path = data/vectors_2w_300_umlaut.txt
  size = 300
}

glove_300d_props {
  path = ext/e2e/data/vectors_10w_300_umlaut.txt
  size = 300 
}

glove_300d_2w_props {
  path = ext/e2e/data/vectors_2w_300_umlaut.txt
  size = 300
}

# Distributed training configurations.
two_local_gpus {
  gpus = [0]
}

# Main configuration.
tuebadz {
  # Computation limits.
  max_top_antecedents = 50
  max_training_sentences = 50
  top_span_ratio = 0.4

  # Model hyperparameters.
  filter_widths = [3, 4, 5]
  filter_size = 50
  char_embedding_size = 8
  char_vocab_path = "data/char_vocab.txt"
  context_embeddings = ${glove_300d_filtered}
  head_embeddings = ${glove_300d_2w}
  contextualization_size = 200
  contextualization_layers = 3
  ffnn_size = 150
  ffnn_depth = 2
  feature_size = 20
  max_span_width = 30
  use_metadata = true 
  use_features = true
  model_heads = true
  coref_depth = 2
  lm_layers = 3
  lm_size = 1024
  coarse_to_fine = true

  # Learning hyperparameters.
  max_gradient_norm = 5.0
  lstm_dropout_rate = 0.4
  lexical_dropout_rate = 0.5
  dropout_rate = 0.2
  optimizer = adam
  learning_rate = 0.001
  decay_rate = 0.999
  decay_frequency = 100

  # Other.
  train_path = data/train_data_07_low_umlaut.json
  genres = [0]
  eval_path = data/eval_data_015_low_umlaut.json
  conll_eval_path = data/eval_data
  lm_path = data/elmo.h5
  eval_frequency = 5000 
  report_frequency = 100
  log_root = logs
}

best {
  # Computation limits.
  max_top_antecedents = 50
  max_training_sentences = 50
  top_span_ratio = 0.4

  # Model hyperparameters.
  filter_widths = [3, 4, 5]
  filter_size = 50
  char_embedding_size = 8
  char_vocab_path = "data/char_vocab.txt"
  context_embeddings = ${glove_300d_filtered}
  head_embeddings = ${glove_300d_2w}
  contextualization_size = 200
  contextualization_layers = 3
  ffnn_size = 150
  ffnn_depth = 2
  feature_size = 20
  max_span_width = 30
  use_metadata = true
  use_features = true
  model_heads = true
  coref_depth = 2
  lm_layers = 3
  lm_size = 1024
  coarse_to_fine = true

  # Learning hyperparameters.
  max_gradient_norm = 5.0
  lstm_dropout_rate = 0.4
  lexical_dropout_rate = 0.5
  dropout_rate = 0.2
  optimizer = adam
  learning_rate = 0.001
  decay_rate = 0.999
  decay_frequency = 100

  # Other.
  train_path = data/train_data_07_low_umlaut.json
  genres = [0]
  eval_path = data/eval_data_015_low_umlaut.json
  conll_eval_path = data/eval_data
  lm_path = data/elmo.h5
  eval_frequency = 5000 
  report_frequency = 100
  log_root = logs
}

# For evaluation. Do not use for training (i.e. only for predict.py, evaluate.py, and demo.py). Rename `best` directory to `final`.
final = ${tuebadz} {
  context_embeddings = ${glove_300d}
  head_embeddings = ${glove_300d_2w}
  lm_path = ""
  eval_path = data/test_data_015_low_umlaut.json
  conll_eval_path = data/test_data
}

props = ${tuebadz} {
  train_path = e2e/ext/data/train_data_07_low_umlaut.json
  context_embeddings = ${glove_300d_props}
  head_embeddings = ${glove_300d_2w_props}
  lm_path = ""
  char_vocab_path = "ext/e2e/data/char_vocab.txt"
  eval_path = ext/e2e/data/eval_data_015_low_umlaut.json
  conll_eval_path = ext/e2e/data/eval_data
  log_root = ext/e2e/logs
}

# Baselines.
c2f_100_ant = ${best} {
  max_top_antecedents = 100
}
c2f_250_ant = ${best} {
  max_top_antecedents = 250
}
c2f_1_layer = ${best} {
  coref_depth = 1
}
c2f_3_layer = ${best} {
  coref_depth = 3
}
distance_50_ant = ${best} {
  max_top_antecedents = 50
  coarse_to_fine = false
  coref_depth = 1
}
distance_100_ant = ${distance_50_ant} {
  max_top_antecedents = 100
}
distance_250_ant = ${distance_50_ant} {
  max_top_antecedents = 250
}
